<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/rabbit
        http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.2.xsd">

	<!-- <tx:annotation-driven /> -->
	<context:annotation-config />
	<task:annotation-driven/>
	<context:component-scan base-package="com.wepiao.*" />
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
		<property name="fileEncoding" value="utf8" />
		<property name="locations">
			<list>
				<value>classpath*:test/test-redis.properties</value>
				<value>classpath*:test/test-jdbc.properties</value>
				<value>classpath*:test/test-config.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />   
	</bean>
	
    <!-- redis 配置 -->
	<bean id="jedisPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="minIdle" value="${redis.pool.minIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}"/>
		<property name="testWhileIdle" value="true" />
	</bean>
	
	<!-- 用户中心标签  redis 配置 -->
	<bean id="jedisPoolConfig4Tag" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig">
		<property name="maxTotal" value="${redis.tag.pool.maxTotal}" />
		<property name="maxIdle" value="${redis.tag.pool.maxIdle}" />
		<property name="minIdle" value="${redis.tag.pool.minIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}"/>
		<property name="testWhileIdle" value="true" />
	</bean>
	
	<!-- 用户中心标签  uid生成   配置 -->
	<bean id="jedisPoolConfig4Uid" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig">
		<property name="maxTotal" value="${redis.uid.pool.maxTotal}" />
		<property name="maxIdle" value="${redis.uid.pool.maxIdle}" />
		<property name="minIdle" value="${redis.uid.pool.minIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}"/>
		<property name="testWhileIdle" value="true" />
	</bean>
	
	<bean id="jedisPool4IsNewUserConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig">
		<property name="maxTotal" value="${redis.isnew.pool.maxTotal}" />
		<property name="maxIdle" value="${redis.isnew.pool.maxIdle}" />
		<property name="minIdle" value="${redis.isnew.pool.minIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${redis.isnew.pool.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${redis.isnew.pool.minEvictableIdleTimeMillis}"/>
		<property name="testOnBorrow" value="false" />
	</bean>
	
	<!-- 用户中心Core redis 配置 -->
	<bean id="shardedJedisPool" class="com.wepiao.user.common.redis.mockRedis.MockShardedJedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1">
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg index="0" value="${redis.server.0.ip}" />
					<constructor-arg index="1" value="${redis.server.0.port}" type="int" />
				</bean>
			</list>
		</constructor-arg>
	</bean>
	
	<!-- 用户中心静态标签 redis 配置 -->
	<bean id="shardedJedisPool4StaticTag" class="com.wepiao.user.common.redis.mockRedis.MockShardedJedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig4Tag" />
		<constructor-arg index="1">
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg index="0" value="${redis.static.tag.server.0.ip}" />
					<constructor-arg index="1" value="${redis.static.tag.server.0.port}" type="int" />
				</bean>
			</list>
		</constructor-arg>
	</bean>
	
	<!-- 用户中心tag redis 配置 （为动态标签准备）-->
	<bean id="shardedJedisPool4DynamicTag" class="com.wepiao.user.common.redis.mockRedis.MockShardedJedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig4Tag" />
		<constructor-arg index="1">
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg index="0" value="${redis.dynamic.tag.server.0.ip}" />
					<constructor-arg index="1" value="${redis.dynamic.tag.server.0.port}" type="int" />
				</bean>
			</list>
		</constructor-arg>
	</bean>
	
	<!-- 用户中uid发号器  redis 配置 -->
	<bean id="shardedJedisPool4UidGen" class="com.wepiao.user.common.redis.mockRedis.MockShardedJedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig4Uid" />
		<constructor-arg index="1">
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg index="0" value="${redis.gen.uid.server.ip}" />
					<constructor-arg index="1" value="${redis.gen.uid.server.port}" type="int" />
				</bean>
			</list>
		</constructor-arg>
	</bean>
	
	<bean id="bonusPhoneNewJedisPool" class="com.wepiao.user.common.redis.mockRedis.MockShardedJedisPool">
	        <constructor-arg index="0" ref="jedisPool4IsNewUserConfig" />
		<constructor-arg index="1">
		        <list>
			        <bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg index="0" value="${redis.phone.server.uri}" type="String" />
					<property name="password"><null/></property>
				</bean>
			</list>
		</constructor-arg>
	</bean>
	
	<!-- 消息队列 redis 配置 -->
	<bean id="shardedJedisPool4Cache" class="com.wepiao.user.common.redis.mockRedis.MockShardedJedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig4Uid" />
		<constructor-arg index="1">
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg index="0" value="${redis.mq.server.ip}" />
					<constructor-arg index="1" value="${redis.mq.server.port}" type="int" />
				</bean>
			</list>
		</constructor-arg>
	</bean>
	<!-- 消息队列消费者 配置 -->
	<bean id="msgConsumer" class="com.wepiao.user.common.mq.MsgConsumer" init-method="init"  destroy-method="destroy">  
  		<constructor-arg index="0" value="mq:msg_rcv_user_tag" />
		<constructor-arg index="1" ref="msgMqHandler" />
		<constructor-arg index="2" value="10" type="int" />
	</bean> 
	
	<!-- 消息订阅配置 -->
	<bean id="msgSubscriber" class="com.wepiao.user.common.mq.MsgSubscriber" init-method="init"  destroy-method="destroy">  
  		<constructor-arg index="0" value="mqpub:update_bd_tag_dict" />
		<constructor-arg index="1" ref="msgListenerHandler" />
	</bean>
	
	<!-- 大数据openid新老标签池(写)  redis 配置 -->
	<bean id="shardedJedisPool4BigDataTagWrite" class="com.wepiao.user.common.redis.mockRedis.MockShardedJedisPool">
		<constructor-arg index="0" ref="jedisPool4IsNewUserConfig" />
		<constructor-arg index="1">
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg index="0" value="${redis.bigdata.tag.write.0.uri}" type="String" />
					<property name="password"><null/></property>
				</bean>
			</list>
		</constructor-arg>
	</bean>
	
	<!-- 大数据openid新老标签池(读)  redis 配置 -->
	<bean id="shardedJedisPool4BigDataTagRead" class="com.wepiao.user.common.redis.mockRedis.MockShardedJedisPool">
		<constructor-arg index="0" ref="jedisPool4IsNewUserConfig" />
		<constructor-arg index="1">
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg index="0" value="${redis.bigdata.tag.read.0.uri}" type="String" />
					<property name="password"><null/></property>
				</bean>
			</list>
		</constructor-arg>
	</bean>

	<!-- 连接老用户体系DB的datasource -->
	<bean id="dataSourceLegacy" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url" value="${jdbc.legacy.url}" />
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<property name="maxWait" value="5000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />
		<property name="filters" value="stat" />
	</bean>
	
	<!-- 备份uid的datasource -->
	<bean id="dataSourceIdBackup" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url" value="${jdbc.idBackup.url}" />
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="50" />
		<property name="maxWait" value="30000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />

		<property name="filters" value="stat" />
	</bean>
	
    <!-- 分库分表的datasource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<property name="driverClassName" value="org.h2.Driver" />

		<property name="url" value="${jdbc.url}" />

		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<property name="maxWait" value="5000" />

		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />

		<property name="filters" value="stat" />
	</bean>
	
	<!-- mybatis3与spring整合 -->
	<bean id="sqlSessionFactoryLegacyUsers" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:conf/mybatis-config.xml" />
		<property name="dataSource" ref="dataSourceLegacy" />
	</bean>
	<bean id="sqlSessionFactoryIdBackup" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:conf/mybatis-config.xml" />
		<property name="dataSource" ref="dataSourceIdBackup" />
	</bean>   
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:conf/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sessionMutilSourceDaoSupport" class="com.wepiao.user.common.base.dao.SqlSessionMutilSourceDaoSupport">
		<property name="sessionFactoryList" >
			<list>
				<ref bean="sqlSessionFactory"/>
			</list>
		</property>
		<property name="tableCount" value="${jdbc.tableCount}" />
		<property name="sqlSessionFactoryLegacyUsers" ref="sqlSessionFactoryLegacyUsers" />
		<property name="sqlSessionFactoryIdBackup" ref="sqlSessionFactoryIdBackup" />
	</bean>

	<!-- 使用注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" mode="proxy" />
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>
</beans>
